<?xml version="1.0"?><mx:Module xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" creationComplete="init()">	<mx:Script>        <![CDATA[            //import mx.utils.* 			import mx.controls.Alert;			import Standard.Module_event;            			private var params:Object;						private function init():void			{				//params = pasrse_string();				params = new Object();				params["map"] = parentApplication.map_xml();			}						/**			* Returns a Hash of params from query string			* Author: http://livedocs.adobe.com/flex/3/html/help.html?content=modular_5.html			*/            public function pasrse_string():Object			{                try				{                    // Remove everything before the question mark, including                    // the question mark.                    var my_pattern:RegExp = /.*\?/;                      var s:String = this.loaderInfo.url.toString();                    s = s.replace(my_pattern, "");                    // Create an Array of name=value Strings.                    var params:Array = s.split("&");										var hash:Object = new Object();                                         // Print the params that are in the Array.                    var keyStr:String;                    var valueStr:String;                    var paramObj:Object = params;                    for (keyStr in paramObj) {                        valueStr = String(paramObj[keyStr]);						hash[keyStr] = valueStr;                    }					return hash;                }				catch (e:Error)				{                    trace(e);                }				return null;            }						import mx.events.CloseEvent; 						/**			* Sends Map name, number of players, and map data to server			*/			private function send_map(event:MouseEvent):void 			{				//Prepare data				var variables:URLVariables = new URLVariables();				variables.name = map_name.text;				variables.players = num_players.text;				variables.data = params["map"];												var xml_url_request:URLRequest = new URLRequest("http://localhost:3000/front/save");				xml_url_request.method = URLRequestMethod.POST;				xml_url_request.data = variables;				//xml_url_request.contentType = "text/xml";													//Set Handlers				var xml_send_loader:URLLoader = new URLLoader();				xml_send_loader.addEventListener(Event.COMPLETE, on_complete, false, 0, true);				xml_send_loader.addEventListener(IOErrorEvent.IO_ERROR, on_IO_error, false, 0, true);				xml_send_loader.addEventListener(Event.OPEN, openHandler);				xml_send_loader.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);				xml_send_loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);					xml_send_loader.addEventListener(ProgressEvent.PROGRESS, progressHandler);				xml_send_loader.dataFormat = URLLoaderDataFormat.TEXT;								xml_send_loader.load(xml_url_request);				function openHandler(event:Event):void {					trace("openHandler: " + event);					//Alert.show("openHandler: " + event, "Flash",0, Sprite(parentApplication));				}				function progressHandler(event:ProgressEvent):void {					trace("progressHandler loaded:" + event.bytesLoaded + " total: " + event.bytesTotal);					//Alert.show("progressHandler loaded:" + event.bytesLoaded + " total: " + event.bytesTotal,"Flash", 0, Sprite(parentApplication));				}				function securityErrorHandler(event:SecurityErrorEvent):void {					trace("securityErrorHandler: " + event);					//Alert.show("securityErrorHandler: " + event, "Flash",0, Sprite(parentApplication));				}				function httpStatusHandler(event:HTTPStatusEvent):void {					trace("httpStatusHandler: " + event);					//Alert.show("httpStatusHandler: " + event, "Flash",0, Sprite(parentApplication));				}				function on_complete(evt:Event):void				{					try {						var loader:URLLoader = URLLoader(evt.target);						var response:String = loader.data;						Alert.show("The response:\n" + response, "Flash",0, Sprite(parentApplication));						trace(response);						removeEventListener(Event.COMPLETE, on_complete);						removeEventListener(IOErrorEvent.IO_ERROR, on_IO_error);						trace("COMPLETE");						dispatchEvent(new Module_event(Module_event.COMPLETE, false, false));					} catch (err:TypeError) {						//Alert.show("An error occured when communicating with server:\n" + err.message, "Flash", 0, parentApplication);						trace("An error occured when communicating with server:\n" + err.message)						Alert.show("An error occured when communicating with server:\n" + err.message, "Flash",0, Sprite(parentApplication));					}				}				function on_IO_error(evt:IOErrorEvent):void {					//Alert.show("An error occurred when attempting to load the XML.\n" + evt.text, "Flash", 0, parentApplication);					trace("An error occurred when attempting to load the XML.\n" + evt.text);					Alert.show("An error occurred when attempting to load the XML.\n" + evt.text, "Flash",0, Sprite(parentApplication));				}			}        ]]>    </mx:Script>		<mx:Panel title = "Map export">		<mx:Form>			<mx:FormHeading label = "Map Attributes"/>			<mx:FormItem label = "Map name">				<mx:TextInput id = "map_name"></mx:TextInput>			</mx:FormItem>			<mx:FormItem label = "Number of Players">				<mx:TextInput id = "num_players"></mx:TextInput>			</mx:FormItem>			<mx:FormItem>                <mx:Button id="submit" label="Submit" click="send_map(event);"/>            </mx:FormItem>		</mx:Form>	</mx:Panel></mx:Module>